# -*- coding: utf-8 -*-

## @file SuricatesPlugin.py
# @date 2020
# @version 20.09
# @author Vincent MAJORCZYK
# @copyright Copyright 2020-2022 CDI-Technologies (France), all right reserved.
# @par License:
# code released under GNU General Public License v3
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
# @par CDI-Technologies:
# *23 avenue de la créativité, 59650 Villeneuve d'Ascq, France*
# https://cditech.fr/raies/
#
# @note this file was initialy generated by Plugin Builder (http://g-sherman.github.io/Qgis-Plugin-Builder/)

from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction

# Import the code for the DockWidget
from .SuricatesApp import *
import os.path
# Import resources
from .resources import *

## @brief QGIS Plugin Implementation.
class SuricatesPlugin:

	## @brief Constructor.
	# @param iface (QgsInterface) An interface instance that will be passed to this class which provides the hook by which you can manipulate the QGIS application at run time.
	def __init__(self, iface):
		self.iface = iface
		self.actions = []
		self.pmanager = None

	## @brief Add a toolbar icon to the toolbar.
	# @param icon_path (string) Path to the icon for this action. Can be a resource
	# @param text (string) Text that should be shown in menu items for this action.
    # @param callback (function) Function to be called when the action is triggered.
	# @param enabled_flag (bool) A flag indicating if the action should be enabled by default. Defaults to True.
	# @param add_to_menu (bool) Flag indicating whether the action should also be added to the menu. Defaults to True.
	# @param add_to_toolbar (bool) Flag indicating whether the action should also be added to the toolbar. Defaults to True.
	# @param status_tip (string) Optional text to show in a popup when mouse pointerhovers over the action.
	# @param parent (QWidget) Parent widget for the new action. Defaults None.
	# @param whats_this (string) Optional text to show in the status bar when the mouse pointer hovers over the action.
	# @return (QAction) The action that was created. Note that the action is also added to self.actions list.
	def add_action(
		self,
		icon_path,
		text,
		callback,
		enabled_flag=True,
		add_to_menu=True,
		add_to_toolbar=True,
		status_tip=None,
		whats_this=None,
		parent=None):

		icon = QIcon(icon_path)
		action = QAction(icon, text, parent)
		action.triggered.connect(callback)
		action.setEnabled(enabled_flag)

		if status_tip is not None:
			action.setStatusTip(status_tip)

		if whats_this is not None:
			action.setWhatsThis(whats_this)

		if add_to_menu:
			self.iface.addPluginToMenu(
				u'RAIES',
				action)

		self.actions.append(action)

		return action

	## @brief Create the menu entries and toolbar icons inside the QGIS GUI.
	def initGui(self):
		icon_path = ':/plugins/suricates/icon.png'
		self.add_action(
			icon_path,
			text=u'RAIES',
			callback=self.run,
			parent=self.iface.mainWindow())

	## @brief Removes the plugin menu item and icon from QGIS GUI.
	def unload(self):
		for action in self.actions:
			self.iface.removePluginMenu(
				u'&RAIES',
				action)

	## @brief Run method that loads and starts the plugin
	def run(self):
		# close previous suricate instance if exist
		if not self.pmanager is None:
			self.pmanager.closeInstance()

		# create new suricate instance
		self.pmanager = SuricatesInstance(self.iface)
		# search group 'Projects' and its contents 
		self.pmanager.initializeProjectNode()
		self.pmanager.updateProjects()
